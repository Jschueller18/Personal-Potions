// Function to load formulation data
async function loadFormulation() {
    const urlParams = new URLSearchParams(window.location.search);
    const customerId = urlParams.get('customerId');
    const localOnly = urlParams.get('localOnly') === 'true';
    
    if (!customerId) {
        showError('No customer ID provided');
        return;
    }
    
    try {
        // If localOnly flag is present, load from localStorage instead of API
        if (localOnly) {
            console.log('Loading data from localStorage for ID:', customerId);
            const storedData = localStorage.getItem(customerId);
            
            if (!storedData) {
                throw new Error('No data found in local storage for this submission ID.');
            }
            
            // Parse the stored form data
            const formData = JSON.parse(storedData);
            console.log('Loaded form data from localStorage:', formData);
            
            // Generate a mock formulation based on form data
            const mockFormulation = generateMockFormulation(formData);
            displayFormulation(mockFormulation);
            
            // Add localized message about using local data
            const container = document.getElementById('formulation-container');
            if (container) {
                const localMessage = document.createElement('div');
                localMessage.className = 'local-data-message';
                localMessage.innerHTML = `
                    <p><strong>Note:</strong> This is a locally generated simulation due to API connection issues. 
                    In a production environment, this data would be calculated by our server.</p>
                `;
                container.prepend(localMessage);
            }
            
            return;
        }
        
        // Normal API flow
        const response = await fetch(`/api/formulations/generate/${customerId}`);
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'Failed to load formulation data');
        }
        
        const data = await response.json();
        console.log('Formulation data:', data);
        
        // Display formulation data
        displayFormulation(data);
        
        /* TODO: External API Integration
         * This section needs to be updated once we have the external API details:
         * 1. Endpoint URL for recommendations
         * 2. Request/response format
         * 3. Error handling requirements
         * 4. Display format for recommendations
         * 
         * Current implementation is a placeholder and will need to be replaced
         * with the actual external API integration.
         */
        // await loadRecommendations(data);
        
    } catch (error) {
        console.error('Error loading formulation:', error);
        showError(error.message || 'Failed to load formulation data');
    }
}

// Function to generate a mock formulation for local development
function generateMockFormulation(formData) {
    // Create a simple mock formulation based on user inputs
    const mockFormulation = {
        ingredients: [
            { name: 'Sodium Chloride', amount: calculateAmount('sodium', formData), unit: 'mg' },
            { name: 'Potassium Citrate', amount: calculateAmount('potassium', formData), unit: 'mg' },
            { name: 'Magnesium Glycinate', amount: calculateAmount('magnesium', formData), unit: 'mg' },
            { name: 'Calcium Lactate', amount: calculateAmount('calcium', formData), unit: 'mg' }
        ],
        instructions: 'Mix one scoop with 16-20 oz of water. Adjust to taste.',
        metadata: {}
    };
    
    // Add usage-specific metadata
    if (formData.usage && formData.usage.includes('hangover')) {
        mockFormulation.metadata.hangover = {
            recommendedTiming: formData['hangover-timing'] || 'Before and after drinking',
            servingsPerDay: '1-2 servings',
            additionalRecommendations: [
                'Drink plenty of water before bed',
                'Consider adding B-vitamins for additional support',
                'Use before alcohol consumption for best results'
            ]
        };
    }
    
    return mockFormulation;
}

// Helper function to calculate mock ingredient amounts
function calculateAmount(nutrient, formData) {
    // Base values
    const baseAmounts = {
        sodium: 500,
        potassium: 400,
        magnesium: 120,
        calcium: 200
    };
    
    // Get user's intake level
    let intakeLevel = 1.0; // Default average
    
    if (formData[`${nutrient}-intake`]) {
        // Calculate based on actual input
        const average = {
            sodium: 6.8,
            potassium: 6.25,
            magnesium: 2.5,
            calcium: 3
        };
        
        const intake = parseFloat(formData[`${nutrient}-intake`]);
        intakeLevel = average[nutrient] / intake;
        
        // Cap the multiplier for safety
        intakeLevel = Math.max(0.5, Math.min(intakeLevel, 2.0));
    } else if (formData[`${nutrient}-estimate`]) {
        // Use quick estimate
        if (formData[`${nutrient}-estimate`] === 'low') {
            intakeLevel = 1.5; // Higher supplementation for low intake
        } else if (formData[`${nutrient}-estimate`] === 'high') {
            intakeLevel = 0.7; // Lower supplementation for high intake
        }
    }
    
    // Adjust for special usage cases
    if (formData.usage) {
        if (formData.usage.includes('sweat')) {
            if (nutrient === 'sodium') intakeLevel *= 1.3;
            if (nutrient === 'potassium') intakeLevel *= 1.2;
        }
        if (formData.usage.includes('bedtime')) {
            if (nutrient === 'magnesium') intakeLevel *= 1.4;
        }
    }
    
    // Calculate and round to the nearest 10
    return Math.round((baseAmounts[nutrient] * intakeLevel) / 10) * 10;
}

// Function to load recommendations from external API
async function loadRecommendations(formulationData) {
    try {
        const response = await fetch('/api/recommendations/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                formulationData,
                customerId: new URLSearchParams(window.location.search).get('customerId')
            })
        });

        if (!response.ok) {
            throw new Error('Failed to load recommendations');
        }

        const recommendations = await response.json();
        displayRecommendations(recommendations);
    } catch (error) {
        console.error('Error loading recommendations:', error);
        // Don't show error to user, just log it
    }
}

// Function to display recommendations
function displayRecommendations(recommendations) {
    const recommendationsDiv = document.getElementById('recommendations');
    const contentDiv = document.getElementById('recommendations-content');
    
    if (!recommendationsDiv || !contentDiv) return;
    
    if (recommendations && recommendations.content) {
        contentDiv.innerHTML = recommendations.content;
        recommendationsDiv.style.display = 'block';
    }
}

// Function to display formulation data
function displayFormulation(data) {
    const container = document.getElementById('formulation-container');
    if (!container) return;
    
    // Clear existing content
    container.innerHTML = '';
    
    // Create formulation display
    const formulation = document.createElement('div');
    formulation.className = 'formulation';
    
    // Add basic information
    formulation.innerHTML = `
        <h2>Your Personalized Formulation</h2>
        <div class="formulation-details">
            <h3>Ingredients</h3>
            <ul>
                ${data.ingredients.map(ing => `
                    <li>${ing.name}: ${ing.amount}${ing.unit}</li>
                `).join('')}
            </ul>
            
            <h3>Instructions</h3>
            <p>${data.instructions}</p>
            
            ${data.metadata && data.metadata.hangover ? `
                <h3>Hangover-Specific Recommendations</h3>
                <div class="hangover-recommendations">
                    <ul>
                        <li><strong>Recommended Timing:</strong> ${data.metadata.hangover.recommendedTiming}</li>
                        <li><strong>Servings per day:</strong> ${data.metadata.hangover.servingsPerDay}</li>
                    </ul>
                    
                    ${data.metadata.hangover.additionalRecommendations && 
                      data.metadata.hangover.additionalRecommendations.length > 0 ? `
                        <h4>Additional Recommendations</h4>
                        <ul>
                            ${data.metadata.hangover.additionalRecommendations.map(rec => 
                                `<li>${rec}</li>`
                            ).join('')}
                        </ul>
                    ` : ''}
                </div>
            ` : ''}
        </div>
    `;
    
    container.appendChild(formulation);
}

// Function to show error messages
function showError(message) {
    const errorContainer = document.getElementById('error-container');
    if (!errorContainer) return;
    
    errorContainer.innerHTML = `
        <div class="error-message">
            <p>${message}</p>
            <button onclick="window.location.href='index.html'">Return to Form</button>
        </div>
    `;
}

// Load formulation data when the page loads
document.addEventListener('DOMContentLoaded', loadFormulation); 